var documenterSearchIndex = {"docs":
[{"location":"lib/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"lib/#ComplexToys","page":"Library","title":"ComplexToys","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [ComplexToys]\nPrivate = false","category":"page"},{"location":"lib/#ComplexToys.modularsurface","page":"Library","title":"ComplexToys.modularsurface","text":"modularsurface(\n    f :: \"Complex -> Complex\",\n    limits = (-1,1,-1,1);\n    mmax = 10,\n    nodes = (720, 720),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces its modular surface plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\nlog plot the magnitude using a logarithmic scale.\nmmax sets an upper cut off point for the magnitude.\nmmin sets a lower cut off point for the magnitude.\ncut toggles the behaviour when the maximum is reached. If true the surface is cut, leaving a flat spot which can be shaded. Else the surface is allowed to render outside of the axis limits.\nnodes is the number of grid points to compute in, respectively, the real and imaginary axis, taking the same for both if only one number is provided.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color. If set to :print a desaturated version of the default is used.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#ComplexToys.riemannlog-Tuple{}","page":"Library","title":"ComplexToys.riemannlog","text":"riemannlog(;\n    nodes = (120, 120),\n    kwargs...\n)\n\nPlots the Riemann surface of log(z), with the bottom plane mapped to the input, the height being equal to the imaginary part of the output and the color corresponding to the real part of the output.\n\nThe keyword argument nodes is the number of grid points to use in respectively the radius and a single rotation of the input. If only one number is provided it is used for both.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"method"},{"location":"lib/#ComplexToys.riemannpow","page":"Library","title":"ComplexToys.riemannpow","text":"riemannpow(\n    k = 1//2;\n    nodes = (120, 120),\n    maxrotations = 10,\n    kwargs...\n)\n\nPlots the Riemann surface of z^k, where k is the exponent, with the bottom plane mapped to the input, the height being equal to the real part of the output and the color corresponding to the imaginary part of the output. The routine attempts to plot all branches.\n\nThe keyword argument nodes is the number of grid points to use in respectively the radius and a single rotation of the input. If only one number is provided it is used for both.\n\nThe automatically selected number of rotations is limited by the keyword maxrotations.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#ComplexToys.riemannsphere-Tuple{Any}","page":"Library","title":"ComplexToys.riemannsphere","text":"riemannsphere(\n    f :: \"Complex -> Complex\";\n    nodes = (720, 720),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces its Riemann sphere surface plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\n\nKeyword Arguments\n\nnodes is the number of grid points to compute in, respectively, the azimuth and polar angles, per quarter section of the sphere. Taking the same for both if only one number is provided.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color. If set to :print a desaturated version of the default is used.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"method"},{"location":"lib/#Reexported-from-DomainColoringToy","page":"Library","title":"Reexported from DomainColoringToy","text":"","category":"section"},{"location":"lib/","page":"Library","title":"Library","text":"Modules = [DomainColoringToy]\nPrivate = false","category":"page"},{"location":"lib/#DomainColoringToy.checkerplot","page":"Library","title":"DomainColoringToy.checkerplot","text":"checkerplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    hicontrast = false,\n    kwargs...\n)\n\nTakes a complex function and produces a checker plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black and white stripes orthogonal to the real axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nimag plots black and white stripes orthogonal to the imaginary axis at a rate of one stripe per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black and white stripes orthogonal to the phase angle at a rate of eight stripes per full rotation. Can be set to an integer to specify a different rate.\nabs plots black and white stripes at a rate of one stripe per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\nhicontrast uses black and white instead of the softer defaults.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.domaincolor","page":"Library","title":"DomainColoringToy.domaincolor","text":"domaincolor(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    abs = false,\n    grid = false,\n    color = true,\n    all = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces its domain coloring plot as an interactive GLMakie plot.\n\nRed corresponds to phase 0, yellow to fracpi3, green to frac2pi3, cyan to pi, blue to frac4pi3, and magenta to frac5pi3.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nabs toggles the plotting of the natural logarithm of the magnitude as lightness ramps between level curves. If set to a number, this will be used as base of the logarithm instead, if set to Inf, zero magnitude will be colored black and poles white. Further granular control can be achieved by passing a named tuple with any of the parameters base, transform, or sigma. base changes the base of the logarithm, as before. transform is the function applied to the magnitude (m -> log(base, m) by default), and sigma changes the rate at which zeros and poles are colored and implies base = Inf.\ngrid plots points with integer real or imaginary part as black dots. More complicated arguments can be passed as a named tuple in a similar fashion to checkerplot.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color. If set to :print a desaturated version of the default is used.\nall is a shortcut for abs = true, grid = true, and color = true.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.pdphaseplot","page":"Library","title":"DomainColoringToy.pdphaseplot","text":"pdphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBC1 cyclic color map for protanopic and deuteranopic viewers as an interactive GLMakie plot.\n\nYellow corresponds to phase 0, white to fracpi2, blue to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.sawplot","page":"Library","title":"DomainColoringToy.sawplot","text":"sawplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    color = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex function and produces a saw plot as an interactive GLMakie plot.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\n\nIf none of the below options are set, the plot defaults to rect = true.\n\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\ncolor toggles coloring of the phase angle. Can also be set to either the name of, or a ColorScheme, or a function θ -> Color. If set to :print a desaturated version of the default is used.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"lib/#DomainColoringToy.tphaseplot","page":"Library","title":"DomainColoringToy.tphaseplot","text":"tphaseplot(\n    f :: \"Complex -> Complex\",\n    limits = (-1, 1, -1, 1);\n    pixels = (480, 480),\n    real = false,\n    imag = false,\n    rect = false,\n    angle = false,\n    abs = false,\n    polar = false,\n    box = nothing,\n    kwargs...\n)\n\nTakes a complex valued function and produces a phase plot using ColorCET's CBTC1 cyclic color map for titranopic viewers as an interactive GLMakie plot.\n\nRed corresponds to phase 0, white to fracpi2, cyan to pi, and black to frac3pi2.\n\nArguments\n\nf is the complex function to plot.\nlimits are the limits of the rectangle to plot, in the format (minRe, maxRe, minIm, maxIm), if one or two numbers are provided instead they are take symmetric along the real and imaginary axis.\n\nKeyword Arguments\n\npixels is the size of the output in pixels, respectively, the number of pixels along the real and imaginary axis, taking the same for both if only one number is provided. If either is :auto, the viewport resolution is used.\nreal plots black to white ramps orthogonal to the real axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nimag plots black to white ramps orthogonal to the imaginary axis at a rate of one ramp per unit increase. If set to a number this will be used as width instead.\nrect is a shortcut for real = true and imag = true.\nangle plots black to white ramps orthogonal to the phase angle at a rate of eight ramps per full rotation. Can be set to an integer to specify a different rate.\nabs plots black to white ramps at a rate of one ramp per unit increase of the natural logarithm of the magnitude. If set to a number this is used as the base of the logarithm. When set to a function, unit increases of its output are used instead.\npolar is a shortcut for angle = true and abs = true. Can also be set to the basis to use for abs, then a suitable rate for angle will be selected.\nbox if set to (a, b, s) shades the area where the output is within the box a and b in the color s when set to (f, s) the colored domain is defined by f(w) == true. Can also be a list of multiple boxes.\n\nRemaining keyword arguments are passed to the plotting backend.\n\n\n\n\n\n","category":"function"},{"location":"#ComplexToys.jl:-Didactical-Tools-for-Complex-Analysis","page":"Home","title":"ComplexToys.jl: Didactical Tools for Complex Analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation of the ComplexToys.jl package, a collection of useful plotting routines for teaching and learning complex analysis, based on Makie, often taking inspiration in the work of Wegert.[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"<div align=\"center\">\n  <img src=\"assets/logo.png\" width=300 />\n</div>","category":"page"},{"location":"","page":"Home","title":"Home","text":"This online documentation is under construction. Take a look at the guide to get started, or use the built-in help functionality of the Julia REPL.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install run:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"add ComplexToys\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Included plotting routines:","category":"page"},{"location":"","page":"Home","title":"Home","text":"modularsurface(z->f(z)) plots a modular surface of f, i.e. a surface plot of the magnitude;\nriemannsphere(z->f(z)) plots a domain coloring of f on the Riemann sphere;\nriemannpow(k) plots a projection of the Riemann surface of z^k; and\nriemannlog() plots a projection of the Riemann surface of log(z).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next to the routines in this package, DomainColoringToy is reexported. See their documentation for domain colourings, checker plots, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: Wegert, Elias. Visual Complex Functions: An Introduction with Phase Portraits. Birkhäuser Basel, 2012.","category":"page"}]
}
